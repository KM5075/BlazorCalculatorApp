@page "/calculator"
@rendermode InteractiveServer
@using System.Text.RegularExpressions

<h3>Calculator</h3>

<div class="calculator">
    <div class="display" id="test">
        <input type="text" id="test1" value="@ResultValue"/>
    </div>
    <div class="buttons">
        @foreach (var row in Buttons)
        {
            @foreach (var button in row)
            {
                string btnStyle = string.Empty;
                if (!Regex.IsMatch(button, "[0-9]|[.=]"))
                {
                    btnStyle = "rightSideButton";
                }
                <button id="@("Button_" + button)" class="@btnStyle" @onclick="() => OnButtonClick(button)">@button</button>
            }
        }
    </div>
</div>

@code {
    private string ResultValue = "";
    private string Current = "";
    private string Next = "";
    private string CurrentOperator = "";

    // ボタンのレイアウト
    private readonly string[][] Buttons = new[]
    {
        new[] { "7", "8", "9", "/" },
        new[] { "4", "5", "6", "*" },
        new[] { "1", "2", "3", "-" },
        new[] { "0", ".", "=", "+" }
    };

    private void OnButtonClick(string button)
    {
        // クリックされたボタンのチェック
        if (Regex.IsMatch(button, "[0-9]|[.]"))
        {
            AddNumber(button);
        }
        else
        {
            AddOperator(button);
        }
    }

    private void AddNumber(string num)
    {
        ResultValue += num;
    }

    private void AddOperator(string ope)
    {
        if (ope.Equals("="))
        {
            Next = ResultValue;
            int currentNum = int.Parse(Current);
            int nextNum = int.Parse(Next);

            switch (CurrentOperator)
            {
                case "+":
                    ResultValue = (currentNum + nextNum).ToString();
                    break;

                case "-":
                    ResultValue = (currentNum - nextNum).ToString();
                    break;

                case "*":
                    ResultValue = (currentNum * nextNum).ToString();
                    break;

                case "/":
                    ResultValue = (currentNum / nextNum).ToString();
                    break;

                default:
                    break;
            }
        }
        else
        {
            Current = ResultValue;
            ResultValue = string.Empty;
            CurrentOperator = ope;
        }
    }
}
